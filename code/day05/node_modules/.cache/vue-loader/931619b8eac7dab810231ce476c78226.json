{"remainingRequest":"D:\\h5-1911\\three\\three_1911\\Vue_nanshig\\nanshig\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\h5-1911\\three\\three_1911\\Vue_nanshig\\nanshig\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\h5-1911\\three\\three_1911\\Vue_nanshig\\nanshig\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\h5-1911\\three\\three_1911\\Vue_nanshig\\nanshig\\src\\components\\AddUser.vue?vue&type=template&id=4be8ec0c&scoped=true&","dependencies":[{"path":"D:\\h5-1911\\three\\three_1911\\Vue_nanshig\\nanshig\\src\\components\\AddUser.vue","mtime":1576762206000},{"path":"D:\\h5-1911\\three\\three_1911\\Vue_nanshig\\nanshig\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\h5-1911\\three\\three_1911\\Vue_nanshig\\nanshig\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\h5-1911\\three\\three_1911\\Vue_nanshig\\nanshig\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\h5-1911\\three\\three_1911\\Vue_nanshig\\nanshig\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}